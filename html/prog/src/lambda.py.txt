import sys
def isref(I):    return type(I) is int
def isapply(I,N):  return type(I) is list and len(I) == N
def step(I):
	if isapply(I,2):
		if isapply(I[0],1):
			return rep(I[0][0],I[1],1)
		T = [step(I[0]),I[1]]
		if T != I:
			return T
		return [I[0],step(I[1])]
	return I
def rep(I,V,N):
	if type(I) is list:
		if len(I) == 1:
			return [rep(I[0],V,N + 1)]
		return [rep(I[0],V,N),rep(I[1],V,N)]
	return V if I == N else I
def parse(I):
	stack = []
	for i in reversed(list(I)):
		if i == '`': stack = stack[:-2] + [[stack[-1],stack[-2]]]
		elif i == '/': stack[-1] = [stack[-1]]
		else: stack += [int(i)]
	return stack[0]
def stringify(I):
	if isapply(I,2): return "`" + stringify(I[0]) + stringify(I[1])
	if isapply(I,1): return "/" + stringify(I[0])
	return str(I)
sys.setrecursionlimit(9999999)
P = parse(raw_input())
T = 0
while T != P: print stringify(P); T = P; P = step(P)
#P=`/`1`1``/`11///``1//1`/```441`/`11/`2`11////``13`2`64///`4`13//``1//22
#H=/`1//2
#T=/`1//1
#N=//`2`2`2`2`2`21
#`H``NTP
#`/`1//2``//`2`2`2`2`2`2`2`2`2`2`2`2`2`2`2`2`21/`1//1`/`1`1``/`11///``1//1`/```441`/`11/`2`11////``13`2`64///`4`13//``1//22