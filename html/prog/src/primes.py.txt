import sys;sys.setrecursionlimit(9999999)
exec'\
import itertools as q;X=lambda I,N:type(I) \
is list and len(I)==N\ndef s(I):\n\tif X(I,\
2):\n\t\tif X(I[0],1):\n\t\t\t@r(I[0][0],I[\
1],1)\n\t\tT=[s(I[0]),I[1]]\n\t\tif T!=I:\n\
\t\t\t@T\n\t\t@[I[0],s(I[1])]\n\t@I\ndef r(\
I,V,N):\n\tif type(I) is list:\n\t\tif len(\
I)==1:\n\t\t\t@[r(I[0],V,N+1)]\n\t\t@[r(I[0\
],V,N),r(I[1],V,N)]\n\t@V if I==N else I\nd\
ef p(I):\n\tt=[]\n\tfor i in reversed(list(\
I)):\n\t\tif i=="{":t=t[:-2]+[[t[-1],t[-2]]\
]\n\t\telif i=="}":t[-1]=[t[-1]];\n\t\telse\
:t+=[int(i)]\n\t@t[0]\ndef g(n):\n\tP=p("{}\
{1}}2{{}}"+"{2"*n+"1}{1}}1{}{1{1{{}{11}}}{{\
1}}1{}{{{441{}{11}{2{11}}}}{{13{2{64}}}{4{1\
3}}{{1}}22");T=0\n\twhile T!=P:T=P;P=s(P)\n\
\t@P[0][0]==1\nfor x in q.ifilter(g,q.count\
()):print x'.replace('@','return ')